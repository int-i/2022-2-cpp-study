#include <iostream>
using std::cin;
using std::cout;
using std::endl;

using std::string;

// 구조체에 대한 설명을 들어가기 전에 알립니다!
// 
// C++에서는 구조체와 클래스가 문법적으로 사실상 거의 동일하기에 둘을 따로 설명할 필요가 없지만,
// 본 강의에서는 우선 C 언어에서 사용되었던 구조체 문법 위주로 설명하고,
// 이후 C++에서 사용되는 클래스 문법 위주의 설명을 진행하겠습니다.


// 구조체: 하나 이상의 변수를 묶어서 "새로운 자료형"을 정의하는 도구
// 기존에 배웠던 int, double, char 등과 같은 '원시 자료형(Primitive Data Type)'을 통해
// 새로운 자료형을 우리가 직접 정의할 수 있게 해준다.
// 이때, 사용자가 직접 정의한 자료형을 '사용자 정의 자료형(User Defined Data Type)'이라고 부른다.
// 당연하지만 구조체 안에는 원시 자료형 뿐만이 아니라 다른 구조체나 클래스가 들어올 수 있다.
// 아래 preson 예제에서도 string이 person 구조체의 요소로 들어와 있는 것을 볼 수 있다.


// 구조체의 문법
// 구조체 정의: struct 구조체이름 {};
// 구조체 변수 선언: 구조체이름 구조체변수이름;

// C 에서는 이런식으로 구조체를 선언했었다.
// C++에서는 이런식으로만 쓰면 초기화 안됐다고 경고를 뱉으므로 초기화를 따로 해줘야 됨.
struct person {
	int 나이;
	double 키;
	string 별명;
};


int main() {
	// C에서는 구조체 변수를 선언할 때 아래처럼 struct를 붙여주어야만 했다.
	// struct person 정연한;
	// C++에서는 안붙여도 되고, 일반적으로 안붙인다.
	// 구조체 변수의 또 다른 이름은 객체이다.
	person 정연한;

	// 객체의 요소에 접근하기 위해서는 아래처럼 .연산자(dot연산자)를 사용하면 된다.
	// 이때 .은 ~의 라고 해석하면 편하다.
	// 예) 정연한.나이 => 정연한의 나이
	정연한.나이 = 25;
	정연한.키 = 170.1;
	정연한.별명 = "연탄";

	cout << "정연한의 나이: " << 정연한.나이 << endl;
	cout << "정연한의 키: " << 정연한.키 << endl;
	cout << "정연한의 별명: " << 정연한.별명 << endl;

	return 0;
}
